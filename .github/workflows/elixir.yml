name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  MIX_ENV: test

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - elixir:  1.12.x
            otp: 23.x
          - elixir:  1.12.x
            otp: 24.x

          - elixir:  1.13.x
            otp: 23.x
          - elixir:  1.13.x
            otp: 24.x
          - elixir:  1.13.x
            otp: 25.x

          - elixir:  1.14.x
            otp: 24.x
          - elixir:  1.14.x
            otp: 25.x
            primary: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}

    # This will disable warnings during dependency compilation, but since we
    # use --warnings-as-errors below for our own code, we'll see any warnings
    # generated by our own code
    - name: Disable compile warnings
      run: echo "::remove-matcher owner=elixir-mixCompileWarning::"

    - name: Retrieve mix dependencies cache
      uses: actions/cache@v3
      id: mix-cache
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-

    - name: Install mix dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix deps.get
        mix deps.compile

    - name: Check for unused dependencies
      if: matrix.primary
      run: mix deps.unlock --check-unused

    - name: Check formatting
      if: matrix.primary
      run: mix format --check-formatted

    - name: Run credo
      if: matrix.primary
      run: mix credo --strict

    - name: Compile code
      run: mix compile --warnings-as-errors

    - name: Retrieve PLT cache
      if: matrix.primary
      uses: actions/cache@v3
      id: plt-cache
      with:
        path: priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-

    - name: Create PLTs
      if: matrix.primary && steps.plt-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p priv/plts
        mix dialyzer --plt

    - name: Run dialyzer
      if: matrix.primary
      run: mix dialyzer --no-check

    - name: Run tests
      run: mix test
